using Kok.Toolkit.Core.Extension;

namespace Kok.Toolkit.Core.Checksum;

/// <summary>
/// CRC-16
/// </summary>
public static class Crc16
{
    #region CRC余式表

    private static readonly ushort[] s_table0X1021 =
    {
        0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
        0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
        0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
        0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
        0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
        0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
        0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
        0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
        0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
        0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
        0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
        0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
        0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
        0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
        0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
        0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
        0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
        0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
        0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
        0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
        0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
        0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
        0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
        0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
        0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
        0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
        0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
        0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
        0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
        0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
        0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
        0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0,
    };

    private static readonly ushort[] s_table0X3d65 =
    {
        0x0000, 0x3D65, 0x7ACA, 0x47AF, 0xF594, 0xC8F1, 0x8F5E, 0xB23B,
        0xD64D, 0xEB28, 0xAC87, 0x91E2, 0x23D9, 0x1EBC, 0x5913, 0x6476,
        0x91FF, 0xAC9A, 0xEB35, 0xD650, 0x646B, 0x590E, 0x1EA1, 0x23C4,
        0x47B2, 0x7AD7, 0x3D78, 0x001D, 0xB226, 0x8F43, 0xC8EC, 0xF589,
        0x1E9B, 0x23FE, 0x6451, 0x5934, 0xEB0F, 0xD66A, 0x91C5, 0xACA0,
        0xC8D6, 0xF5B3, 0xB21C, 0x8F79, 0x3D42, 0x0027, 0x4788, 0x7AED,
        0x8F64, 0xB201, 0xF5AE, 0xC8CB, 0x7AF0, 0x4795, 0x003A, 0x3D5F,
        0x5929, 0x644C, 0x23E3, 0x1E86, 0xACBD, 0x91D8, 0xD677, 0xEB12,
        0x3D36, 0x0053, 0x47FC, 0x7A99, 0xC8A2, 0xF5C7, 0xB268, 0x8F0D,
        0xEB7B, 0xD61E, 0x91B1, 0xACD4, 0x1EEF, 0x238A, 0x6425, 0x5940,
        0xACC9, 0x91AC, 0xD603, 0xEB66, 0x595D, 0x6438, 0x2397, 0x1EF2,
        0x7A84, 0x47E1, 0x004E, 0x3D2B, 0x8F10, 0xB275, 0xF5DA, 0xC8BF,
        0x23AD, 0x1EC8, 0x5967, 0x6402, 0xD639, 0xEB5C, 0xACF3, 0x9196,
        0xF5E0, 0xC885, 0x8F2A, 0xB24F, 0x0074, 0x3D11, 0x7ABE, 0x47DB,
        0xB252, 0x8F37, 0xC898, 0xF5FD, 0x47C6, 0x7AA3, 0x3D0C, 0x0069,
        0x641F, 0x597A, 0x1ED5, 0x23B0, 0x918B, 0xACEE, 0xEB41, 0xD624,
        0x7A6C, 0x4709, 0x00A6, 0x3DC3, 0x8FF8, 0xB29D, 0xF532, 0xC857,
        0xAC21, 0x9144, 0xD6EB, 0xEB8E, 0x59B5, 0x64D0, 0x237F, 0x1E1A,
        0xEB93, 0xD6F6, 0x9159, 0xAC3C, 0x1E07, 0x2362, 0x64CD, 0x59A8,
        0x3DDE, 0x00BB, 0x4714, 0x7A71, 0xC84A, 0xF52F, 0xB280, 0x8FE5,
        0x64F7, 0x5992, 0x1E3D, 0x2358, 0x9163, 0xAC06, 0xEBA9, 0xD6CC,
        0xB2BA, 0x8FDF, 0xC870, 0xF515, 0x472E, 0x7A4B, 0x3DE4, 0x0081,
        0xF508, 0xC86D, 0x8FC2, 0xB2A7, 0x009C, 0x3DF9, 0x7A56, 0x4733,
        0x2345, 0x1E20, 0x598F, 0x64EA, 0xD6D1, 0xEBB4, 0xAC1B, 0x917E,
        0x475A, 0x7A3F, 0x3D90, 0x00F5, 0xB2CE, 0x8FAB, 0xC804, 0xF561,
        0x9117, 0xAC72, 0xEBDD, 0xD6B8, 0x6483, 0x59E6, 0x1E49, 0x232C,
        0xD6A5, 0xEBC0, 0xAC6F, 0x910A, 0x2331, 0x1E54, 0x59FB, 0x649E,
        0x00E8, 0x3D8D, 0x7A22, 0x4747, 0xF57C, 0xC819, 0x8FB6, 0xB2D3,
        0x59C1, 0x64A4, 0x230B, 0x1E6E, 0xAC55, 0x9130, 0xD69F, 0xEBFA,
        0x8F8C, 0xB2E9, 0xF546, 0xC823, 0x7A18, 0x477D, 0x00D2, 0x3DB7,
        0xC83E, 0xF55B, 0xB2F4, 0x8F91, 0x3DAA, 0x00CF, 0x4760, 0x7A05,
        0x1E73, 0x2316, 0x64B9, 0x59DC, 0xEBE7, 0xD682, 0x912D, 0xAC48,
    };

    private static readonly ushort[] s_table0X8005 =
    {
        0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
        0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
        0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
        0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
        0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
        0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
        0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
        0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
        0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
        0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
        0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
        0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
        0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
        0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
        0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
        0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,
        0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
        0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
        0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
        0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
        0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
        0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
        0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
        0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
        0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
        0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
        0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
        0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
        0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202,
    };

    #endregion CRC余式表

    /// <summary>
    /// 计算给定数据的CRC-16校验和
    /// </summary>
    /// <param name="data">给定的数据</param>
    /// <param name="start">起始索引</param>
    /// <param name="length">计算长度</param>
    /// <param name="table">余式表</param>
    /// <param name="init">初始值</param>
    /// <param name="refIn">是否输入反转</param>
    /// <param name="refOut">是否输出反转</param>
    /// <param name="xorOut">结果异或值</param>
    /// <returns></returns>
    public static ushort Compute(ReadOnlySpan<byte> data, int start, int length, ReadOnlySpan<ushort> table, ushort init,
        bool refIn, bool refOut, ushort xorOut)
    {
        if (data == null)
            throw new ArgumentNullException(nameof(data));
        if (data.Length == 0)
            throw new ArgumentOutOfRangeException(nameof(data), "长度不能为0");
        if (start < 0)
            throw new ArgumentOutOfRangeException(nameof(start));
        if (start >= data.Length && length > 1)
            throw new ArgumentOutOfRangeException(nameof(start));
        var end = start + length - 1;
        if (end > data.Length)
            throw new ArgumentOutOfRangeException(nameof(length));
        if (length < 0)
            throw new ArgumentOutOfRangeException(nameof(length));
        var crc = init;
        for (var j = start; j <= end; j++)
        {
            var dataByte = refIn ? data[j].Reverse() : data[j];
            crc = (ushort)(table[((crc >> 8) ^ dataByte) & 0xff] ^ (crc << 8));
        }
        crc = refOut ? crc.ReverseBit() : crc;
        return (ushort)(crc ^ xorOut);
    }

    /// <summary>
    /// CRC-16-IBM 0x8005
    /// </summary>
    public static class Ibm
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X8005, 0x0000, true, true, 0x0000);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-MAXIM 0X8005
    /// </summary>
    public static class Maxim
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X8005, 0x0000, true, true, 0xFFFF);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(byte[] data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-USB 0X8005
    /// </summary>
    public static class Usb
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X8005, 0xFFFF, true, true, 0xFFFF);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-MODBUS 0X8005
    /// </summary>
    public static class ModBus
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X8005, 0xFFFF, true, true, 0x0000);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-CCITT 0X1021
    /// </summary>
    public static class Ccitt
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X1021, 0x0000, true, true, 0x0000);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-CCITT-FALSE 0X1021
    /// </summary>
    public static class CcittFalse
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X1021, 0xFFFF, false, false, 0x0000);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-X25 0X1021
    /// </summary>
    public static class X25
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X1021, 0xFFFF, false, false, 0xFFFF);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-YMODEM 0X0121
    /// </summary>
    public static class YModem
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X1021, 0x0000, false, false, 0x0000);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }

    /// <summary>
    /// CRC-16-DNP 0X3D65
    /// </summary>
    public static class Dnp
    {
        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data, int start, int length)
            => Crc16.Compute(data, start, length, s_table0X3d65, 0x0000, true, true, 0xFFFF);

        /// <summary>
        /// 计算校验和
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static ushort Compute(ReadOnlySpan<byte> data)
            => Compute(data, 0, data.Length);
    }
}
